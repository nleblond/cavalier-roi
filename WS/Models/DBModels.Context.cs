//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBModelsParameters : DbContext
    {
        public DBModelsParameters()
            : base("name=DBModelsParameters")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Commandes> Commandes { get; set; }
        public virtual DbSet<Contenus> Contenus { get; set; }
        public virtual DbSet<Eleves> Eleves { get; set; }
        public virtual DbSet<Emplacements> Emplacements { get; set; }
        public virtual DbSet<Evenements> Evenements { get; set; }
        public virtual DbSet<Frais> Frais { get; set; }
        public virtual DbSet<Lignes> Lignes { get; set; }
        public virtual DbSet<Participations> Participations { get; set; }
        public virtual DbSet<Plannings> Plannings { get; set; }
        public virtual DbSet<Produits> Produits { get; set; }
        public virtual DbSet<Publications> Publications { get; set; }
        public virtual DbSet<Reservations> Reservations { get; set; }
        public virtual DbSet<Statuts> Statuts { get; set; }
        public virtual DbSet<Typologies> Typologies { get; set; }
        public virtual DbSet<Adresses> Adresses { get; set; }
    
        public virtual ObjectResult<EleveResult> GetEleves(Nullable<int> id, string nom, string prenom, string email, string club, string license, Nullable<int> evenementId, Nullable<int> typologieId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var clubParameter = club != null ?
                new ObjectParameter("Club", club) :
                new ObjectParameter("Club", typeof(string));
    
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var evenementIdParameter = evenementId.HasValue ?
                new ObjectParameter("EvenementId", evenementId) :
                new ObjectParameter("EvenementId", typeof(int));
    
            var typologieIdParameter = typologieId.HasValue ?
                new ObjectParameter("TypologieId", typologieId) :
                new ObjectParameter("TypologieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EleveResult>("GetEleves", idParameter, nomParameter, prenomParameter, emailParameter, clubParameter, licenseParameter, evenementIdParameter, typologieIdParameter);
        }
    
        public virtual int DelEleve(Nullable<int> id, string real)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var realParameter = real != null ?
                new ObjectParameter("Real", real) :
                new ObjectParameter("Real", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelEleve", idParameter, realParameter);
        }
    
        public virtual ObjectResult<EvenementAndTypologieResult> GetEvenementsAndTypologies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EvenementAndTypologieResult>("GetEvenementsAndTypologies");
        }
    
        public virtual ObjectResult<StatutResult> GetStatuts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatutResult>("GetStatuts");
        }
    
        public virtual ObjectResult<CommandeResult> GetCommandes(Nullable<int> id, string dtMin, string dtMax, Nullable<int> produitId, string produitReference, Nullable<int> eleveId, string referenceTransaction, string referenceExterne, Nullable<int> statutId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var dtMinParameter = dtMin != null ?
                new ObjectParameter("DtMin", dtMin) :
                new ObjectParameter("DtMin", typeof(string));
    
            var dtMaxParameter = dtMax != null ?
                new ObjectParameter("DtMax", dtMax) :
                new ObjectParameter("DtMax", typeof(string));
    
            var produitIdParameter = produitId.HasValue ?
                new ObjectParameter("ProduitId", produitId) :
                new ObjectParameter("ProduitId", typeof(int));
    
            var produitReferenceParameter = produitReference != null ?
                new ObjectParameter("ProduitReference", produitReference) :
                new ObjectParameter("ProduitReference", typeof(string));
    
            var eleveIdParameter = eleveId.HasValue ?
                new ObjectParameter("EleveId", eleveId) :
                new ObjectParameter("EleveId", typeof(int));
    
            var referenceTransactionParameter = referenceTransaction != null ?
                new ObjectParameter("ReferenceTransaction", referenceTransaction) :
                new ObjectParameter("ReferenceTransaction", typeof(string));
    
            var referenceExterneParameter = referenceExterne != null ?
                new ObjectParameter("ReferenceExterne", referenceExterne) :
                new ObjectParameter("ReferenceExterne", typeof(string));
    
            var statutIdParameter = statutId.HasValue ?
                new ObjectParameter("StatutId", statutId) :
                new ObjectParameter("StatutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommandeResult>("GetCommandes", idParameter, dtMinParameter, dtMaxParameter, produitIdParameter, produitReferenceParameter, eleveIdParameter, referenceTransactionParameter, referenceExterneParameter, statutIdParameter);
        }
    
        public virtual int DelCommande(Nullable<int> id, string real)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var realParameter = real != null ?
                new ObjectParameter("Real", real) :
                new ObjectParameter("Real", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelCommande", idParameter, realParameter);
        }
    
        public virtual int UpdateCommande(Nullable<int> id, Nullable<int> statutId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statutIdParameter = statutId.HasValue ?
                new ObjectParameter("StatutId", statutId) :
                new ObjectParameter("StatutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCommande", idParameter, statutIdParameter);
        }
    
        public virtual int UpdCommande(Nullable<int> id, Nullable<int> statutId, string referenceTransaction, string referenceExterne)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statutIdParameter = statutId.HasValue ?
                new ObjectParameter("StatutId", statutId) :
                new ObjectParameter("StatutId", typeof(int));
    
            var referenceTransactionParameter = referenceTransaction != null ?
                new ObjectParameter("ReferenceTransaction", referenceTransaction) :
                new ObjectParameter("ReferenceTransaction", typeof(string));
    
            var referenceExterneParameter = referenceExterne != null ?
                new ObjectParameter("ReferenceExterne", referenceExterne) :
                new ObjectParameter("ReferenceExterne", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdCommande", idParameter, statutIdParameter, referenceTransactionParameter, referenceExterneParameter);
        }
    
        public virtual ObjectResult<CategorieResult> GetCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategorieResult>("GetCategories");
        }
    
        public virtual ObjectResult<ProduitResult> GetProduits(Nullable<int> id, string libelle, string reference, Nullable<int> stockMin, Nullable<int> stockMax, Nullable<int> categorieId, Nullable<int> commandeId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var stockMinParameter = stockMin.HasValue ?
                new ObjectParameter("StockMin", stockMin) :
                new ObjectParameter("StockMin", typeof(int));
    
            var stockMaxParameter = stockMax.HasValue ?
                new ObjectParameter("StockMax", stockMax) :
                new ObjectParameter("StockMax", typeof(int));
    
            var categorieIdParameter = categorieId.HasValue ?
                new ObjectParameter("CategorieId", categorieId) :
                new ObjectParameter("CategorieId", typeof(int));
    
            var commandeIdParameter = commandeId.HasValue ?
                new ObjectParameter("CommandeId", commandeId) :
                new ObjectParameter("CommandeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProduitResult>("GetProduits", idParameter, libelleParameter, referenceParameter, stockMinParameter, stockMaxParameter, categorieIdParameter, commandeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetId(string table)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetId", tableParameter);
        }
    
        public virtual int DelProduit(Nullable<int> id, string real)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var realParameter = real != null ?
                new ObjectParameter("Real", real) :
                new ObjectParameter("Real", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelProduit", idParameter, realParameter);
        }
    }
}
