@model dynamic

@{
    try { ViewBag.Title = Model.ContenusZones[0].Titre; } catch { }
    try { ViewBag.Description = Model.ContenusZones[0].Texte; } catch { }
    Layout = "~/Views/Shared/_LayoutFrontOffice.cshtml";
}

<div class="stages">

    @Html.Partial("~/Views/Shared/Zones.cshtml", @Model.ContenusZones as List<WS.Models.OUT.Contenu>)

    <div class="clear"></div>


    @if ((Model != null) && (Model.EvenementsStages.Count > 0))
    {

        List<WS.Models.OUT.Evenement> _Stages = (Model.EvenementsStages as List<WS.Models.OUT.Evenement>).FindAll(e => e.EvenementParent == null);

        for (Int32 _Index = 0; _Index < _Stages.Count; _Index++)
        {

            <div class="stage @((_Index + 1) % 2 == 0 ? "last" : "")">
                @if (!String.IsNullOrEmpty(_Stages[_Index].Photo))
                {
                    <img class="photo" src="@Angular.Constants.IMG_URL/Evenements/@_Stages[_Index].Id/@_Stages[_Index].Photo" />
                }
                <span class="titre">@_Stages[_Index].Libelle</span>
                <div class="clear-left"></div>
                @if (_Stages[_Index].Descriptif != null)
                {
                    <span class="descriptif texte">@Html.Raw((@_Stages[_Index].Descriptif as String).ToBR())</span>
                    <div class="clear-left"></div>
                }
                <div class="date">
                    @if (!String.IsNullOrEmpty(_Stages[_Index].DtDebut))
                    {
                        <div>Date de début : <span>@_Stages[_Index].DtDebut</span></div>
                        <div class="clear-left"></div>
                    }
                    @if (!String.IsNullOrEmpty(_Stages[_Index].DtFin))
                    {
                        <div>Date de fin : <span>@_Stages[_Index].DtFin</span></div>
                        <div class="clear-left"></div>
                    }
                    @if (!String.IsNullOrEmpty(_Stages[_Index].DtLimiteInscription))
                    {
                        <div>Date limite d'inscription : <span>@_Stages[_Index].DtLimiteInscription</span></div>
                        <div class="clear-left"></div>
                    }
                    @if ((_Stages[_Index].Minimum != null) && (_Stages[_Index].Minimum != 1))
                    {
                        <div>Nombre minimum d'inscriptions : <span>@_Stages[_Index].Minimum</span></div>
                        <div class="clear-left"></div>
                    }
                    @if ((_Stages[_Index].Maximum != null) && (_Stages[_Index].Maximum != 1))
                    {
                        <div>Nombre maximum d'inscriptions : <span>@_Stages[_Index].Maximum</span></div>
                        <div class="clear-left"></div>
                    }
                </div>
                <div class="clear-left"></div>

                @{
                    List<WS.Models.OUT.Evenement> _FormulesStages = (Model.EvenementsStages as List<WS.Models.OUT.Evenement>).FindAll(e =>
                            e.EvenementParent != null
                            &&
                            e.EvenementParent.Id != null
                            &&
                            e.EvenementParent.Id == _Stages[_Index].Id
                    );
                }

                <table cellpadding="0" cellspacing="0" border="0" class="formule texte">
                    <tr>
                        <td class="libelle">FORMULE COMPLETE</td>
                        <td class="prix">&nbsp;&nbsp;@Tools.Euro(_Stages[_Index].Prix)&nbsp;&nbsp;</td>
                        <td class="reserver">
                            @if (
                                    //(
                                    //    (String.IsNullOrEmpty(_Stages[_Index].DtDebut) == true)
                                    //    ||
                                    //    (String.IsNullOrEmpty(_Stages[_Index].DtDebut) == false) && (DateTime.Parse(_Stages[_Index].DtDebut) >= DateTime.Now)
                                    //)
                                    //&&
                                    //(
                                    //    (String.IsNullOrEmpty(_Stages[_Index].DtLimiteInscription) == true)
                                    //    ||
                                    //    (String.IsNullOrEmpty(_Stages[_Index].DtLimiteInscription) == false) && (DateTime.Parse(_Stages[_Index].DtLimiteInscription) >= DateTime.Now)
                                    //)
                                    //&&
                                    //(
                                    //    (_Stages[_Index].Maximum == null)
                                    //    ||
                                    //    (_Stages[_Index].Maximum != null) && (_Stages[_Index].Maximum > _Stages[_Index].Compte)
                                    //)
                                    1 == 1
                            )
                            {
                                <input type="button" class="reserver" title="Réserver" value="Réserver"
                                       data-evenementid="@_Stages[_Index].Id"
                                       data-evenementlibelle="@_Stages[_Index].Libelle"
                                       data-eleveid="@(Model.Eleve != null ? Model.Eleve.Id : String.Empty)"
                                       data-dtdebut="@_Stages[_Index].DtDebut"
                                       data-dtfin="@_Stages[_Index].DtFin"
                                       data-prix="@_Stages[_Index].Prix"
                                       data-duree="@_Stages[_Index].Duree"
                                       data-evenementparentid="" />
                            }
                            else if ((_Stages[_Index].Maximum != null) && (_Stages[_Index].Maximum <= _Stages[_Index].Compte))
                            {
                                <span class="jaune">COMPLET</span>
                            }
                            else
                            {
                                <span class="jaune">TERMIN&Eacute;</span>
                            }
                        </td>
                    </tr>
                    @if ((_FormulesStages != null) && (_FormulesStages.Count > 0))
                    {
                        for (Int32 _Index2 = 0; _Index2 < _FormulesStages.Count; _Index2++)
                        {
                            <tr>
                                <td class="libelle">@_FormulesStages[_Index2].Libelle</td>
                                <td class="prix">&nbsp;&nbsp;@Tools.Euro(_FormulesStages[_Index2].Prix)&nbsp;&nbsp;</td>
                                <td class="reserver">
                                    @if (
                                            //(
                                            //    (String.IsNullOrEmpty(_Stages[_Index].DtDebut) == true)
                                            //    ||
                                            //    (String.IsNullOrEmpty(_Stages[_Index].DtDebut) == false) && (DateTime.Parse(_Stages[_Index].DtDebut) >= DateTime.Now)
                                            //)
                                            //&&
                                            //(
                                            //    (String.IsNullOrEmpty(_Stages[_Index].DtLimiteInscription) == true)
                                            //    ||
                                            //    (String.IsNullOrEmpty(_Stages[_Index].DtLimiteInscription) == false) && (DateTime.Parse(_Stages[_Index].DtLimiteInscription) >= DateTime.Now)
                                            //)
                                            //&&
                                            //(
                                            //    (_FormulesStages[_Index].Maximum == null)
                                            //    ||
                                            //    (_FormulesStages[_Index].Maximum != null) && (_FormulesStages[_Index].Maximum > _FormulesStages[_Index].Compte)
                                            //)
                                            1 == 1
                                    )
                                    {
                                        <input type="button" class="reserver" title="Réserver" value="Réserver"
                                               data-evenementid="@_FormulesStages[_Index2].Id"
                                               data-evenementlibelle="@_FormulesStages[_Index2].Libelle"
                                               data-eleveid="@(Model.Eleve != null ? Model.Eleve.Id : String.Empty)"
                                               data-dtdebut="@_Stages[_Index].DtDebut"
                                               data-dtfin="@_Stages[_Index].DtFin"
                                               data-prix="@_FormulesStages[_Index2].Prix"
                                               data-duree="@_FormulesStages[_Index2].Duree"
                                               data-evenementparentid="@_FormulesStages[_Index2].EvenementParent.Id" />
                                    }
                                    else if ((_FormulesStages[_Index].Maximum != null) && (_FormulesStages[_Index].Maximum <= _FormulesStages[_Index].Compte))
                                    {
                                        <span class="jaune">COMPLET</span>
                                    }
                                    else
                                    {
                                        <span class="jaune">TERMIN&Eacute;</span>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </table>

            </div>

        }
    }

    <div class="clear"></div>

    @Html.Partial("~/Views/Shared/PartenariatsEncarts.cshtml", @Model.ContenusPartenariatsEncarts as List<WS.Models.OUT.Contenu>)

    <div class="clear"></div>

</div>

<script language="javascript" src="@Angular.Constants.ROOT_URL/Scripts/Views/Stages.js" type="text/javascript"></script>
